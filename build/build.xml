<project name="jive" default="build"
         xmlns:git="antlib:com.rimerosolutions.ant.git">
    <import file="git.xml"/>
    <import file="build-utils.xml"/>

    <property name="project.root.path" location=".."/>
    <property name="docs.path" location="${project.root.path}/docs"/>
    <property name="tests.path" location="${project.root.path}/tests"/>
    <property name="localbuild.path" location="${project.root.path}/localbuild"/>
    <property name="github.deployment.path" location="${project.root.path}/../jive-pages"/>

    <!--<import file="${project.root.path}/../keys/jive.xml"/>-->

    <condition property="is.mac">
        <os family="mac"/>
    </condition>
    <condition property="is.windows">
        <os family="windows"/>
    </condition>

    <target name="build">
        <antcall target="test"/>
        <antcall target="gen.docs"/>
        <antcall target="build.schema"/>
    </target>

     <target name="build.schema" depends="gen.docs">
        <exec dir="${project.root.path}" executable="haxelib" failonerror="true">
            <arg line="run hml-xsd-gen -xml ${docs.path}/jive.xml -xsd ${project.root.path}/schema -explicit"/>
        </exec>
    </target>

    <target name="test">
        <!--<condition property="browser.option" value="-browser ${browser}" else="">-->
            <!--<isset property="browser"/>-->
        <!--</condition>-->
        <antcall target="haxe">
            <param name="dir" value="${project.root.path}/tests"/>
            <param name="hxml" value="gen.hxml"/>
        </antcall>
        <antcall target="munit">
            <param name="dir" value="${project.root.path}/tests"/>
            <param name="command" value="gen"/>
            <param name="options" value=""/>
        </antcall>
        <antcall target="openfl">
            <param name="dir" value="${project.root.path}/tests"/>
            <param name="command" value="test"/>
            <param name="options" value="project.xml cpp -Dtest -debug"/>
        </antcall>

        <!--<copy todir="${project.root.path}/tests/resources/assets">-->
            <!--<fileset dir="${project.root.path}/tests/bin/html5/bin/assets"/>-->
        <!--</copy>-->

        <!--<antcall target="munit">-->
            <!--<param name="dir" value="${project.root.path}/tests"/>-->
            <!--<param name="command" value="test"/>-->
            <!--<param name="options" value="-nogen ${browser.option}"/>-->
        <!--</antcall>-->
    </target>

    <!-- to test one test use ant test.oneTest -Dtest=SvgTest-->
    <target name="test.oneTest">
        <!--<condition property="browser.option" value="-browser ${browser}" else="">-->
                <!--<isset property="browser"/>-->
        <!--</condition>-->
        <antcall target="haxe">
            <param name="dir" value="${project.root.path}/tests"/>
            <param name="hxml" value="gen.hxml"/>
        </antcall>
        <antcall target="munit">
            <param name="dir" value="${project.root.path}/tests"/>
            <param name="command" value="gen"/>
            <param name="options" value="-filter ${test}"/>
        </antcall>
        <antcall target="openfl">
            <param name="dir" value="${project.root.path}/tests"/>
            <param name="command" value="test"/>
            <param name="options" value="project.xml cpp -Dtest"/>
        </antcall>

        <!--<copy todir="${project.root.path}/tests/resources/assets">-->
            <!--<fileset dir="${project.root.path}/tests/bin/html5/bin/assets"/>-->
        <!--</copy>-->

        <!--<antcall target="munit">-->
            <!--<param name="dir" value="${project.root.path}"/>-->
            <!--<param name="command" value="test"/>-->
            <!--<param name="options" value="-nogen ${browser.option}"/>-->
        <!--</antcall>-->
    </target>

    <target name="gen.docs">
        <antcall target="haxe">
            <param name="hxml" value="docs.hxml"/>
        </antcall>

        <antcall target="dox">
            <param name="dir" value="${docs.path}"/>
            <param name="input.path" value="jive.xml"/>
            <param name="output.path" value="api"/>
            <param name="theme.path" value="themes/haxeui-dox-theme"/>
        </antcall>

        <mkdir dir="${project.root.path}/localbuild/site/docs/api"/>
        <copy toDir="${project.root.path}/localbuild/site/docs/api">
            <fileset dir="${project.root.path}/docs/api"/>
        </copy>
    </target>

    <target name="build.haxelib.package" depends="build.schema">
        <delete dir="${localbuild.path}/package"/>
        <mkdir dir="${localbuild.path}/package"/>
        <copy todir="${localbuild.path}/package">
            <fileset dir="${project.root.path}/src"/>
        </copy>
        <copy todir="${localbuild.path}/package/schema">
            <fileset dir="${project.root.path}/schema"/>
        </copy>
        <delete>
            <fileset dir="${localbuild.path}/package/assets" includes="*" excludes="*.ttf"/>
        </delete>
        <zip basedir="${localbuild.path}/package" destfile="${localbuild.path}/jive-package.zip"/>
    </target>

</project>